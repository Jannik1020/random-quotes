{"version":3,"sources":["logo.svg","components/Presentational.js","reducers/changeQuotes.js","reducers/rootReducer.js","actions/actionTypes.js","actions/actions.js","App.js","store.js","serviceWorker.js","index.js"],"names":["module","exports","Presentational","this","props","newQuote","console","log","id","icon","faQuoteLeft","currentQuote","currentAuth","className","target","href","faTwitter","color","onClick","handleClick","bind","React","Component","quotes","authors","changeState","Math","floor","random","length","repeat","combineReducers","randomQuoteReducer","state","action","type","Provider","ReactRedux","Container","connect","dispatch","App","store","createStore","rootReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,uMCMtBC,G,kLAGbC,KAAKC,MAAMC,a,+BAKX,OADAC,QAAQC,IAAIJ,KAAKC,OAEb,yBAAKI,GAAG,aACJ,yBAAKA,GAAG,cACJ,kBAAC,IAAD,CAAiBA,GAAG,aAAaC,KAAMC,MACvC,0BAAMF,GAAG,QAAQL,KAAKC,MAAMO,eAEhC,yBAAKH,GAAG,gBACJ,uBAAGA,GAAI,UAAP,KAAmBL,KAAKC,MAAMQ,cAElC,yBAAKJ,GAAG,WACJ,uBAAGK,UAAU,SAASL,GAAG,cAAcM,OAAO,SAASC,KAAM,0CAAiDZ,KAAKC,MAAMO,aAAe,SAAWR,KAAKC,MAAMQ,aAC1J,kBAAC,IAAD,CAAiBH,KAAMO,IAAWC,MAAM,MAE5C,4BAAQJ,UAAU,SAASL,GAAG,YAAYU,QAASf,KAAKgB,YAAYC,KAAKjB,OAAzE,mB,GArBwBkB,IAAMC,Y,OCJ5CC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAClEC,EAAU,CAAC,MAAO,MAAO,MAAO,MAAO,OAa7C,IAAMC,EAAc,iBAAO,CACvBF,OAAQA,EACRC,QAASA,EACTb,cAAeY,EAAOG,KAAKC,MAAMD,KAAKE,SAAWL,EAAOM,SAAW,KAAKC,OAAO,IAC/ElB,YAAaY,EAAQE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAQK,SAASC,OAAO,KChB7DC,cAAgB,CAC5BC,mBDAY,WAA2D,IAA/BC,EAA8B,uDAAtBR,IAAeS,EAAO,uCACrE,OAAOA,EAAOC,MACV,IEPiB,YFSb,OADA7B,QAAQC,IAAI,gBACLkB,IACX,QACI,OAAOQ,MGTZ,ICMDG,EAAWC,IAUjB,IAQMC,GAAYC,EAjBFF,MAEhB,SAAyBJ,GACvB,MAAM,CACJtB,aAAcsB,EAAMD,mBAAmBrB,aACvCC,YAAaqB,EAAMD,mBAAmBpB,gBAIf,SAAC4B,GAC1B,MAAO,CACLnC,SAAU,WACRmC,EDlBK,CACHL,KDJiB,kBE0BPI,CAA6CrC,GAahDuC,E,uKATX,OACE,kBAACL,EAAD,CAAUM,MC1BLC,YACHC,ID0BA,kBAACN,EAAD,W,GAJUjB,IAAMC,WEhBJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.5f2ef6d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faTwitter} from \"@fortawesome/free-brands-svg-icons\"\r\nimport {faQuoteLeft} from \"@fortawesome/free-solid-svg-icons\"\r\nimport \"./presentational.scss\"\r\n\r\nexport default class Presentational extends React.Component{\r\n\r\n    handleClick(){\r\n        this.props.newQuote();\r\n    }\r\n\r\n    render(){        \r\n        console.log(this.props);\r\n        return(\r\n            <div id=\"quote-box\">\r\n                <div id=\"quote-text\">\r\n                    <FontAwesomeIcon id=\"quote-icon\" icon={faQuoteLeft}/>\r\n                    <span id=\"text\">{this.props.currentQuote}</span>\r\n                </div>\r\n                <div id=\"quote-author\">\r\n                    <p id= \"author\">- {this.props.currentAuth}</p>\r\n                </div>\r\n                <div id=\"buttons\">\r\n                    <a className=\"button\" id=\"tweet-quote\" target=\"_blank\" href={\"https://twitter.com/intent/tweet?text=\" + '\"' + this.props.currentQuote + '\" von ' + this.props.currentAuth}>\r\n                        <FontAwesomeIcon icon={faTwitter} color=\"\"/>\r\n                    </a>\r\n                    <button className=\"button\" id=\"new-quote\" onClick={this.handleClick.bind(this)}>New Quote</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as actionTypes from \"../actions/actionTypes\"\r\n\r\nconst quotes = [\"Abc\", \"Def\", \"Ghi\", \"Jkl\", \"Mno\", \"Pqr\", \"Stu\", \"Vwx\", \"Yz\"];\r\nconst authors = [\"123\", \"456\", \"789\", \"312\", \"987\"];\r\n\r\nexport default function randomQuoteReducer(state = changeState(), action){\r\n    switch(action.type){\r\n        case actionTypes.NEW_QUOTE:\r\n            console.log(\"In here jay!\");\r\n            return changeState();\r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}\r\n\r\nconst changeState = () => ({\r\n    quotes: quotes,\r\n    authors: authors,\r\n    currentQuote: (quotes[Math.floor(Math.random() * quotes.length)] + \" \").repeat(30),\r\n    currentAuth: authors[Math.floor(Math.random() * authors.length)].repeat(3)\r\n});","import {combineReducers} from \"redux\";\r\n\r\nimport randomQuoteReducer from \"./changeQuotes\";\r\n\r\nexport default combineReducers({\r\n   randomQuoteReducer\r\n});","export const NEW_QUOTE = \"NEW_QUOTE\";","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const changeQuoteAction = () =>{\r\n    return {\r\n        type: actionTypes.NEW_QUOTE\r\n    };\r\n}","import React from 'react';\nimport * as ReactRedux from \"react-redux\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Presentational from \"./components/Presentational\";\nimport configureStore from \"./store\";\nimport {changeQuoteAction} from \"./actions/actions\";\n\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\n\nfunction mapStateToProps(state){\n  return{\n    currentQuote: state.randomQuoteReducer.currentQuote,\n    currentAuth: state.randomQuoteReducer.currentAuth\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    newQuote: () => {\n      dispatch(changeQuoteAction())\n    }\n  };\n}\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\n\nclass App extends React.Component{\n  render(){\n    return (\n      <Provider store={configureStore()}>\n        <Container />\n      </Provider>\n    );\n  }\n}\n\n\nexport default App;\n","import {createStore} from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport shuffle from \"./Util\";\r\n\r\nexport default function configureStore(){\r\n    return createStore(\r\n        rootReducer        \r\n    );\r\n    \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}